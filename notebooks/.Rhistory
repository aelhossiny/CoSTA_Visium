start.time <- Sys.time()
exp_to_tree_map <- read.csv("KEGG_exp_to_tree_map_BRCA.csv", header = TRUE, stringsAsFactors = FALSE)
pwd()
getwd()
exp_to_tree_map <- read.csv("../KEGG_exp_to_tree_map.csv", header = TRUE, stringsAsFactors = FALSE)
library(treemap)
install.packages("treemap")
library(treemap)
install.packages("html")
install.packages("htmltools")
install.packages("htmltools")
library(treemap)
install.packages(htmllooks)
install.packages(htmltools)
install.packages("htmltools")
install.packages("htmltools")
library(htmltools)
library(rmarkdown)
library(htmltools)
start.time <- Sys.time()
exp_to_tree_map <- read.csv("../KEGG_exp_to_tree_map.csv", header = TRUE, stringsAsFactors = FALSE)
exp_to_tree_map <- read.csv("../KEGG_exp_to_tree_map.csv", header = TRUE, stringsAsFactors = FALSE)
end.time <- Sys.time()
length(unique(exp_to_tree_map$geneId))
head(exp_to_tree_map)
ens_map <- exp_to_tree_map[, c("Functional.Annotation.Subgroup", "Functional.Annotation", "geneId")]
# Repetitions of 1 ENSEMBL ID in the same functional annotation
sum(duplicated(ens_map))
ens_map <- exp_to_tree_map[, c("Functional.Annotation.Subgroup", "Functional.Annotation", "geneId")]
# Repetitions of 1 ENSEMBL ID in the same functional annotation
sum(duplicated(ens_map))
ens_map <- ens_map[!duplicated(ens_map), ]
# Times ENSEMBLE IDs are associated to > 1 functional annotation
sum(duplicated(ens_map["geneId"]))
# Remove repetitions of 1 ENSEMBLE ID in the same functional hierarchies
exp_to_tree_map <- exp_to_tree_map[!duplicated(exp_to_tree_map[,
c("Functional.Annotation.Subgroup", "Functional.Annotation", "geneId")]), ]
nrow(exp_to_tree_map)
head(exp_to_tree_map)
nrow(exp_to_tree_map)
start.time <- Sys.time()
col_rgb <- character()
for (i in 0:255) {
for (j in 0:255) {
col_rgb <- append(col_rgb, rgb(red=i, green=j, blue=j, maxColorValue=255))
}
}
end.time <- Sys.time()
end.time - start.time
length(col_rgb)
gene_color <- col_rgb[seq(from=1, to=length(col_rgb),
by=as.integer(length(col_rgb)/nrow(exp_to_tree_map)))][1:nrow(exp_to_tree_map)]
length(gene_color)
# Background color, e.g. #FFFFFF, used later to generate the PNG image, can not be contained in the set of colors
tail(gene_color)
exp_to_tree_map["colorGene"] <- gene_color
head(exp_to_tree_map)
library(treemap)
install.packages("htmltools")
install.packages("htmltools.0.05")
install.packages("htmltools.0.5")
install.packages("htmltools0.5")
install.packages('htmltools',version = '0.5.0.9001')
install.packages("htmltools", version = "0.5.0.9001")
library(treemap)
library(htmltools, version)
library(htmltools, version = '0.5.0.9001')
remove.packages("htmltools")
remove.packages(htmltools)
install.packages("htmltools", version = "0.5.0.9001")
install.packages("htmltools", version = "0.5.0.9001")
library(treemap)
library(htmltools)
library(treemap)
library(png)
library(grid)
library(Seurat)
library(SoupX)
library(Seurat)
library(SoupX)
library(Seurat)
library(Seurat)
install.packages("RColorBrewer")
library(Seurat)
library(Seurat)
library(Seurat)
suppressPackageStartupMessages({
library(Seurat)
library(tidyverse)
library(cowplot)
library(dplyr)
library(SoupX)
library(BiocParallel)
source("../../src/correct_reads_function.r")
})
register(MulticoreParam(16))
samples_info <- read.csv("../../data/11-11-20_correcting_ambient_RNA/samples_info.csv")
tissue_samples <- samples_info[samples_info$Description %in% c("AdjNormal","LiverMet","Tumor"),]
row.names(tissue_samples) <- tissue_samples$FolderName
files <- list.files("objects")
objects_list <- lapply(files, FUN = function(x) {
seurat_object <- readRDS(paste0("objects/",x))
seurat_object[["Sample"]] <- paste0(x)
seurat_object[["RunID"]] <- tissue_samples[x,'runId']
seurat_object[["percent_mt"]] <- PercentageFeatureSet(seurat_object, pattern = "^MT-")
seurat_object <- subset(seurat_object, subset = nFeature_RNA > 200 & percent_mt < 15)
return(seurat_object)
})
names(objects_list) <-  list.files("objects")
objects_list$`1205PBMC` <- NULL #PBMC Sample
objects_list[1:3]
unlist(objects_list)
merge(objects_list[1], unlist(objects_list[2:])
merge(objects_list[[1], unlist(objects_list[2:])
merge(objects_list[[1]], unlist(objects_list[2:])
merge(objects_list[[1]], unlist(objects_list[[2:]])
merged_seurat_object <- objects_list[[1]]
merged_seurat_object
merged_seurat_object <- merge(merged_seurat_object, objects_list[[i]])
for (i in 2:length(objects_list)){
merged_seurat_object <- merge(merged_seurat_object, objects_list[[i]])
}
dim(merged_seurat_object)
x <- lapply(objects_list, dim)
x
x <- lapply(objects_list, FUN = function(x) {dim(x)[2]})
x
sum(x)
sum(unlist(x))
dim(merged_seurat_object)
merged_seurat_object
merged_seurat_object$RunID
unique(merged_seurat_object$RunID)
merged_seurat_object.list <- SplitObject(merged_seurat_object, split.by = "RunID")
merged_seurat_object.list <- lapply(X = merged_seurat_object.list, FUN = function(x) {
x <- NormalizeData(x)
x <- FindVariableFeatures(x, selection.method = "vst", nfeatures = 2000)
})
features <- SelectIntegrationFeatures(object.list = merged_seurat_object.list)
merged_seurat_object.list <- lapply(X = merged_seurat_object.list, FUN = function(x) {
x <- ScaleData(x, features = features, verbose = FALSE)
x <- RunPCA(x, features = features, verbose = FALSE)
})
anchors <- FindIntegrationAnchors(object.list = merged_seurat_object.list, anchor.features = features, reduction = "rpca")
combined <- IntegrateData(anchorset =anchors)
DefaultAssay(combined) <- "integrated"
combined <- ScaleData(combined, verbose = FALSE)
combined <- RunPCA(combined, npcs = 30, verbose = FALSE)
combined <- RunUMAP(combined, reduction = "pca", dims = 1:30)
combined <- FindNeighbors(combined, reduction = "pca", dims = 1:30)
combined <- FindClusters(combined, resolution = 0.5)
saveRDS(combined, file = "objects/combined_integrated_seurat_object.rds")
DimPlot(combined)
View(combined)
FeaturePlot(combined, features = "CD8A")
suppressPackageStartupMessages({
library(Seurat)
library(tidyverse)
library(cowplot)
library(dplyr)
library(SoupX)
library(BiocParallel)
source("../../src/correct_reads_function.r")
})
register(MulticoreParam(16))
combined <- readRDS("objects/combined_integrated_seurat_object.rds")
DefaultAssay(combined) <- "CorrectedCounts"
merged_seurat_object.list <- SplitObject(combined, split.by = "RunID")
merged_seurat_object.list <- lapply(X = merged_seurat_object.list, FUN = function(x) {
x <- NormalizeData(x)
x <- FindVariableFeatures(x, selection.method = "vst", nfeatures = 2000)
})
features <- SelectIntegrationFeatures(object.list = merged_seurat_object.list)
anchors <- FindIntegrationAnchors(object.list = merged_seurat_object.list, anchor.features = features)
combined_CCA <- IntegrateData(anchorset = anchors)
DefaultAssay(combined_CCA) <- "integrated"
combined_CCA <- ScaleData(combined_CCA, verbose = FALSE)
combined_CCA <- RunPCA(combined_CCA, npcs = 50, verbose = FALSE)
combined_CCA <- RunUMAP(combined_CCA, reduction = "pca", dims = 1:30)
combined_CCA <- FindNeighbors(combined_CCA, reduction = "pca", dims = 1:30)
combined_CCA <- FindClusters(combined_CCA, resolution = 0.5)
saveRDS(combined_CCA, file = "objects/combined_CCA_integrated_seurat_object.rds")
DimPlot(combined_CCA)
FeaturePlot(combined_CCA, features = "CD3E")
DefaultAssay(combined_CCA) <- "CorrectedCounts"
FeaturePlot(combined_CCA, "CD3E")
FeaturePlot(combined_CCA, "CD8A")
FeaturePlot(combined_CCA, "CD4")
FeaturePlot(combined_CCA, "CD8A", order = T)
FeaturePlot(combined_CCA, features = "CD8A", order = T, label = T)
FeaturePlot(combined_CCA, features = "CD8A", order = T, label = T)
FeaturePlot(combined_CCA, features = c("CD3E",CD8A"), order = T, label = T)
)
)
)
""
FeaturePlot(combined_CCA, features = c("CD3E","CD8A"), order = T, label = T)
DimPlot(combined_CCA)
DimPlot(combined_CCA, label = T, repel = T)
DimPlot(combined_CCA, label = T, repel = T) + FeaturePlot(combined_CCA, features = "CD8A")
DimPlot(combined_CCA, label = T, repel = T) + FeaturePlot(combined_CCA, features = "CD8B")
DimPlot(combined_CCA, label = T, repel = T) + FeaturePlot(combined_CCA, features = "CD8")
DimPlot(combined_CCA, label = T, repel = T) + FeaturePlot(combined_CCA, features = "CD8A", order = T, label = T)
t_cells_subset <- subset(combined_CCA, subset = seurat_clusters %in% c(4,7))
DimPlot(t_cells_subset)
DimPlot(combined_CCA)
DimPlot(combined_CCA, label = T)
t_cells_subset <- subset(combined_CCA, subset = seurat_clusters %in% c(4,11))
DimPlot(t_cells_subset)
DefaultAssay(t_cells_subset) <- "integrated"
t_cells_subset <- ScaleData(t_cells_subset, verbose = FALSE)
t_cells_subset <- ScaleData(t_cells_subset, verbose = FALSE)
t_cells_subset <- RunPCA(t_cells_subset, verbose = FALSE)
t_cells_subset <- RunPCA(t_cells_subset, verbose = FALSE)
t_cells_subset <- RunUMAP(t_cells_subset, reduction = "pca", dims = 1:10, min.dist = 0.1)
t_cells_subset <- RunUMAP(t_cells_subset, reduction = "pca", dims = 1:10, min.dist = 0.1)
t_cells_subset <- RunTSNE(t_cells_subset)
t_cells_subset <- RunTSNE(t_cells_subset)
t_cells_subset <- FindNeighbors(t_cells_subset, reduction = "pca", dims = 1:10)
t_cells_subset <- FindClusters(t_cells_subset, resolution = 0.3)
t_cells_subset[["DiseaseState"]] <- str_extract(string = t_cells_subset@meta.data$Sample, pattern = "[:alpha:]+$")
t_cells_subset[["DiseaseState"]] <- gsub(pattern = "TumorKeller",replacement = "Tumor",x = t_cells_subset[["DiseaseState"]]$DiseaseState)
DimPlot(t_cells_subset, group.by = "DiseaseState", label = T)
DimPlot(t_cells_subset, group.by = "DiseaseState", reduction = "tsne")
DimPlot(t_cells_subset, group.by = "DiseaseState", label = T) +
DimPlot(t_cells_subset, group.by = "DiseaseState", reduction = "tsne")
DimPlot(t_cells_subset, group.by = "DiseaseState", label = T) +
FeatureLocator(t_cells_subset, features = c("GZMK","GZMB", "TIGIT","EOMES"))
DimPlot(t_cells_subset, group.by = "DiseaseState", label = T) +
FeatureLocator(t_cells_subset, feature = c("GZMK","GZMB", "TIGIT","EOMES"))
DefaultAssay(t_cells_subset) <- "CorrectedCounts"
DimPlot(t_cells_subset, group.by = "DiseaseState", label = T) +
FeaturePlot(t_cells_subset, feature = c("GZMK","GZMB", "TIGIT","EOMES"))
DimPlot(t_cells_subset, group.by = "DiseaseState", label = T) +
FeaturePlot(t_cells_subset, feature = c("GZMK","GZMB", "TIGIT","EOMES"), order = T)
library(Seurat)
library(SeuratData)
library(ggplot2)
library(patchwork)
library(dplyr)
BiocManager::install("Seurat")
library(Seurat)
library(SeuratData)
library(ggplot2)
library(patchwork)
library(dplyr)
setwd("/nfs/turbo/dcmb-class/bioinf593/sec001/hossiny/Bioinf593_project/notebooks/")
Load10X_Spatial(filename = "../datasets/normal/Visium_FFPE_Human_Normal_Prostate_filtered_feature_bc_matrix.h5")
Load10X_Spatial(data.dir = "../datasets/normal/", filename = "filtered_feature_bc_matrix.h5")
BiocManager::install("hdf5r")
Load10X_Spatial(data.dir = "../datasets/normal", filename = "filtered_feature_bc_matrix.h5")
BiocManager::install("hdf5r")
